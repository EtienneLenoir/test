' Microsoft Excel Objects (Sheet1)
Private m_dex2 As CDex2
Private Sub cmdCancelRequest_Click()
m_dex2.CancelRequest()
End Sub
Private Sub cmdCreateDex2_Click()
m_dex2 = New CDex2
End Sub
Private Sub cmdDeleteDex2_Click()
m_dex2 = Nothing
End Sub
Private Sub cmdRequest_Click()
m_dex2.Request()
m_dex2.WaitforResponse()
If m_dex2.Status = Dex2Lib.DE_DS_FULL Then
DisplayData(m_dex2.Data)
End If
End Sub
Private Sub cmdSetErrorHandling_Click()
' We can choose to display error code
m_dex2.SetErrorHandling DE_EH_ERROR_CODES
' Or display error description
' m_dex2.SetErrorHandling DE_EH_STRING
End Sub
Private Sub DisplayData(ByVal a_data As Object)
Dim i As Long
Dim j As Long
For i = LBound(a_data, 1) To UBound(a_data, 1)
Dim l_row As Integer
l_row = i - LBound(a_data, 1) + 1
For j = LBound(a_data, 2) To UBound(a_data, 2)
Dim l_col As Integer
l_col = j - LBound(a_data, 2) + 1
' Check whether there are any in the response
If VarType(a_data(i, j)) = vbError Then
ActiveCell.Worksheet.Cells(l_row, l_col).Value = _
"ERR MSG: " &
m_dex2.GetErrorString(CLng(a_data(i, j)))
Else
ActiveCell.Worksheet.Cells(l_row, l_col).Value = _
a_data(i, j)
End If
Next j
Next i
End Sub



Private Sub DisplayData(ByVal a_data As Object)
Dim i As Long
Dim j As Long
For i = LBound(a_data, 1) To UBound(a_data, 1)
Dim l_row As Integer
l_row = i - LBound(a_data, 1) + 1
For j = LBound(a_data, 2) To UBound(a_data, 2)
Dim l_col As Integer
l_col = j - LBound(a_data, 2) + 1
' Check whether there are any in the response
If VarType(a_data(i, j)) = vbError Then
ActiveCell.Worksheet.Cells(l_row, l_col).Value = _
"ERR MSG: " &
m_dex2.GetErrorString(CLng(a_data(i, j)))
Else
ActiveCell.Worksheet.Cells(l_row, l_col).Value = _
a_data(i, j)
End If
Next j
Next i
End Sub
' Modules (PLVbaApis)
Public Declare Function CreateReutersObject Lib "PLVbaApis.dll" _
(ByVal progID As String) As Object
Public Function CreateDex2Manager() As Dex2Lib.Dex2Mgr
CreateDex2Manager = CreateReutersObject("Dex2.Dex2Mgr")
End Function
' Class Modules (CDex2)
Private m_dex2Mgr As Dex2Mgr
Private WithEvents m_rdata As RData
Private m_rdataMgr As RDataMgr
Private m_logger As CLogger
Private m_cookie As Long
Private m_hasReceivedResponse As Boolean
Private m_dataStatus As DEX2_DataStatus
Private m_error As Object
Private Sub Class_Initialize()
m_dataStatus = DE_DS_NULL_EMPTY
m_hasReceivedResponse = False
m_logger = New CLogger
m_dex2Mgr = CreateDex2Manager()
m_cookie = m_dex2Mgr.Initialize(m_logger)
m_rdata = m_dex2Mgr.CreateRData(m_cookie)
m_rdataMgr = m_dex2Mgr.CreateRDataMgr(m_cookie)
End Sub
Public Sub SetErrorHandling(ByVal a_errorHandling As DEX2_ErrorHandling)
m_dex2Mgr.SetErrorHandling(m_cookie, a_errorHandling)
End Sub
Public Function GetErrorString(ByVal a_errorCode As Long)
GetErrorString = m_dex2Mgr.GetErrorString(a_errorCode)
End Function
Private Sub Class_Terminate()
m_dex2Mgr.Finalize(m_cookie)
m_rdata = Nothing
m_dex2Mgr = Nothing
End Sub


Public Function Request()
On Error GoTo ErrorHandler
m_hasReceivedResponse = False
' We can set all required values using the following properties
m_rdata.InstrumentIDList = "TRI.N; MSFT.O, GOOG.O"
m_rdata.FieldList = "RF.IS.NetSales"
m_rdata.RequestParam = "FP:FY2010;FY2005 CURR:EUR"
m_rdata.DisplayParam = "RH:In CH:Fd"
' Or use just only this function
' m_rdata.SetParameter _
' "TRI.N, MSFT.O, GOOG.O", _
' "RF.IS.NetSales", _
' "FP:FY2010;FY2005 CURR:EUR", _
' "RH:In CH:Fd"
' Ignore cache; get data directly from the Snapshot Server
m_rdata.Subscribe(False)
' Or use cache by default
' m_rdata.Subscribe
Exit Function
ErrorHandler:
MsgBox(m_dex2Mgr.GetErrorString(Err.Number))
End Function
Public Function WaitforResponse()
Do While Not m_hasReceivedResponse
DoEvents()
Loop
End Function
Public Function CancelRequest()
If (m_rdata.RunStatus = DE_RS_BUSY) Then
m_rdata.CancelRequest()
End If
End Function
Public Property Get Data() As Variant
Data = m_rdata.Data
End Property
Public Property Get Status() As DEX2_DataStatus
Status = m_dataStatus
End Property
Public Property Get Error() As Variant
Error = m_error
End Property
Private Sub m_rdata_OnUpdate(ByVal a_dataStatus As Dex2Lib.DEX2_DataStatus, ByVal
a_error As Object)
' Indicates that data has been received
m_hasReceivedResponse = True
m_dataStatus = a_dataStatus
m_error = a_error
End Sub
' Class Modules (CLogger)
Implements Dex2Lib.IDex2Logger
Private Sub IDex2Logger_LogMessage( _
ByVal dex2lsLogSeverity As Dex2Lib.DEX2_LogSeverity, _
ByVal bstrLogMessage As String)
MsgBox("Severity = " & dex2lsLogSeverity & _
" Error description = " & bstrLogMessage)
End Sub


Dex2Mgr manages the lifetime of RData and RDataMgr components. It provides functions to create RData
and RDataMgr, and converts a numeric error code to its corresponding string description. It also allows the
user application code to specify the format of an error; usually as a numeric value or string



Private m_dex2Mgr As Dex2Lib.Dex2Mgr
Private m_cookie As Long
Private WithEvents m_rdata As Dex2Lib.RData
Private m_hasReceivedResponse As Boolean
Private m_counter as Long
Private Sub Class_Initialize()
Set m_dex2Mgr = CreateDex2Manager()
m_cookie = m_dex2Mgr.Initialize()
End Sub
Public Sub Request()
m_hasReceivedResponse = False
Set m_rdata = m_dex2Mgr.CreateRData(m_cookie)
m_rdata.SetParameter "TRI.N", "RI.ID.RIC"
m_rdata.Subscribe
WaitforResponse
' Here we can process the retrieved data
' ...
' ...
End Sub
Public Function WaitforResponse()
Do While Not m_hasReceivedResponse
' If we wait long enough already, cancel the previuos request
If ( m_counter > 10000000 ) Then
m_rdata.CancelRequest
End If
' Otherwise, continue waiting
DoEvents
Loop
End Function
Private Sub m_rdata_OnUpdate(ByVal a_dataStatus As Dex2Lib.DEX2_
DataStatus, ByVal
a_error As Object)
' Indicates that data has been received
m_hasReceivedResponse = True
End Sub

''''''''''''''''''''''''''''''''''''''



Private m_dex2Mgr As Dex2Lib.Dex2Mgr
Private m_cookie As Long
Private WithEvents m_rdata As Dex2Lib.RData
Private Sub Class_Initialize()
Set m_dex2Mgr = CreateDex2Manager()
m_cookie = m_dex2Mgr.Initialize()
End Sub
Public Sub Request()
Set m_rdata = m_dex2Mgr.CreateRData(m_cookie)
m_rdata.SetParameter "TRI.N; MSFT.O", "RI.ID.RIC"
End Sub
Private Sub m_rdata_OnUpdate(ByVal DataStatus As Dex2Lib.DEX2_DataStatus,
ByVal
Error As Variant)
Select Case DataStatus
Case Is = Dex2Lib.DE_DS_FULL
DisplayData (m_rdata.Data)
Case Is = Dex2Lib.DE_DS_NULL_ERROR
MsgBox "DE_DS_NULL_ERROR"
Case Is = Dex2Lib.DE_DS_NULL_EMPTY
MsgBox "DE_DS_NULL_EMPTY"
Case Is = Dex2Lib.DE_DS_NULL_TIMEOUT
MsgBox "DE_DS_NULL_TIMEOUT"
End Select
End Sub

Private Sub DisplayData(a_data As Variant)
Dim i As Long
Dim j As Long
For i = LBound(a_data, 1) To UBound(a_data, 1)
Dim l_row As Integer
l_row = i - LBound(a_data, 1) + 1
For j = LBound(a_data, 2) To UBound(a_data, 2)
Dim l_col As Integer
l_col = j - LBound(a_data, 2) + 1
ActiveCell.Worksheet.Cells(l_row, l_col).Value = a_data(i, j)
Next j
Next i
End Sub

https://developers.lseg.com/en/article-catalog/article/Using-Power-BI-to-visualize-the-data-from-Eikon-Data-API
https://developers.lseg.com/en/api-catalog/eikon/eikon-data-api/tutorials


https://developers.lseg.com/en/article-catalog/article/dataframe-manipulation-with-pandas-a-beginners-guide
https://developers.lseg.com/en/article-catalog/article/portfolio-visualization
https://developers.lseg.com/en/article-catalog/article/interactive-dashboard-to-visualise-the-transaction-cost-analysis

https://developers.lseg.com/en/article-catalog/article/building-a-graphical-user-interface-app-in-python
https://developers.lseg.com/en/article-catalog/article/leveraging-parallel-programming-in-python