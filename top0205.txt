Function TrouverCoordonneesTableaux() As Object
    Dim ws As Worksheet
    Dim startCol As Long
    Dim endCol As Long
    Dim startRow As Long
    Dim endRow As Long
    Dim tableauCount As Integer
    Dim i As Long
    Dim j As Long
    Dim resultDict As Object
    
    ' Créer un nouvel objet Dictionary
    Set resultDict = CreateObject("Scripting.Dictionary")
    
    ' Référence à la feuille de calcul active
    Set ws = ActiveSheet
    
    ' Initialisation des variables
    startCol = 1
    tableauCount = 0
    
    ' Parcours des colonnes
    For i = 1 To ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
        ' Vérifier si la colonne est vide
        If WorksheetFunction.CountA(ws.Columns(i)) = 0 Then
            ' Si la colonne précédente n'était pas vide, c'est la fin d'un tableau
            If startCol <> i - 1 Then
                endCol = i - 1
                ' Recherche de la dernière ligne non vide dans le tableau
                For j = 1 To ws.Rows.Count
                    If WorksheetFunction.CountA(ws.Cells(j, startCol)) = 0 Then
                        endRow = j - 1
                        Exit For
                    End If
                Next j
                ' Ajouter les coordonnées du tableau au dictionnaire
                resultDict.Add ws.Cells(startRow, startCol).Address & ":" & ws.Cells(endRow, endCol).Address, ws.Cells(startRow, startCol).Address
            End If
            ' Réinitialiser la colonne de départ
            startCol = i + 1
        End If
    Next i
    
    ' Gérer le dernier tableau s'il se termine à la dernière colonne de la feuille
    If startCol <= ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column Then
        endCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
        ' Recherche de la dernière ligne non vide dans le dernier tableau
        For j = 1 To ws.Rows.Count
            If WorksheetFunction.CountA(ws.Cells(j, startCol)) = 0 Then
                endRow = j - 1
                Exit For
            End If
        Next j
        ' Ajouter les coordonnées du dernier tableau au dictionnaire
        resultDict.Add ws.Cells(startRow, startCol).Address & ":" & ws.Cells(endRow, endCol).Address, ws.Cells(startRow, startCol).Address
    End If
    
    ' Retourner le dictionnaire
    Set TrouverCoordonneesTableaux = resultDict
End Function


# Mieux

Function TrouverCoordonneesTableaux() As Object
    Dim ws As Worksheet
    Dim startCol As Long
    Dim endCol As Long
    Dim startRow As Long
    Dim endRow As Long
    Dim tableauCount As Integer
    Dim i As Long
    Dim resultDict As Object
    
    ' Créer un nouvel objet Dictionary
    Set resultDict = CreateObject("Scripting.Dictionary")
    
    ' Référence à la feuille de calcul active
    Set ws = ActiveSheet
    
    ' Initialisation des variables
    startCol = 1
    tableauCount = 0
    
    ' Parcours des colonnes
    For i = 1 To ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
        ' Vérifier si la colonne est vide
        If WorksheetFunction.CountA(ws.Columns(i)) = 0 Then
            ' Si la colonne précédente n'était pas vide, c'est la fin d'un tableau
            If startCol <> i - 1 Then
                endCol = i - 1
                ' Recherche de la dernière ligne non vide dans le tableau
                startRow = ws.Cells(1, startCol).Row
                endRow = ws.Cells(ws.Rows.Count, startCol).End(xlUp).Row
                ' Ajouter les coordonnées du tableau au dictionnaire
                resultDict.Add ws.Cells(startRow, startCol).Address & ":" & ws.Cells(endRow, endCol).Address, ws.Cells(startRow, startCol).Address
            End If
            ' Réinitialiser la colonne de départ
            startCol = i + 1
        End If
    Next i
    
    ' Gérer le dernier tableau s'il se termine à la dernière colonne de la feuille
    If startCol <= ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column Then
        endCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
        ' Recherche de la dernière ligne non vide dans le dernier tableau
        startRow = ws.Cells(1, startCol).Row
        endRow = ws.Cells(ws.Rows.Count, startCol).End(xlUp).Row
        ' Ajouter les coordonnées du dernier tableau au dictionnaire
        resultDict.Add ws.Cells(startRow, startCol).Address & ":" & ws.Cells(endRow, endCol).Address, ws.Cells(startRow, startCol).Address
    End If
    
    ' Retourner le dictionnaire
    Set TrouverCoordonneesTableaux = resultDict
End Function

# quicksort

Function QuickSortTableau(ByVal tableau As Variant, ByVal colonne As Long, ByVal triCroissant As Boolean) As Variant
 
    Dim stack As Dictionary
    Set stack = New Dictionary
    stack.Add 1, UBound(tableau, 1)
    
    Do While stack.Count > 0
        Dim debut As Long
        Dim fin As Long
        debut = stack.Keys(0)
        fin = stack.Items(0)
        stack.Remove debut
        
        Dim i As Long
        Dim j As Long
        Dim pivot As Variant
        Dim temp As Variant
        
        i = debut
        j = fin
        pivot = tableau((debut + fin) \ 2, colonne)
        
        ' Partitionnement du tableau
        Do While i <= j
            If triCroissant Then
                Do While tableau(i, colonne) < pivot
                    i = i + 1
                Loop
                Do While tableau(j, colonne) > pivot
                    j = j - 1
                Loop
            Else
                Do While tableau(i, colonne) > pivot
                    i = i + 1
                Loop
                Do While tableau(j, colonne) < pivot
                    j = j - 1
                Loop
            End If
            
            If i <= j Then
                ' Échanger les lignes dans le tableau
                For k = LBound(tableau, 2) To UBound(tableau, 2)
                    temp = tableau(i, k)
                    tableau(i, k) = tableau(j, k)
                    tableau(j, k) = temp
                Next k
                
                i = i + 1
                j = j - 1
            End If
        Loop
        
        If debut < j Then stack.Add debut, j
        If i < fin Then stack.Add i, fin
    Loop
    
    QuickSortTableau = tableau
End Function

# mieux alphabetique et numerique

Function QuickSortTableau(ByVal tableau As Variant, ByVal colonne As Long, ByVal triCroissant As Boolean, Optional ByVal ligneTitre As Boolean = False) As Variant

    Dim stack As Dictionary
    Set stack = New Dictionary
    
    stack.Add IIf(ligneTitre, 2, 1), UBound(tableau, 1)
    
    Do While stack.Count > 0
        Dim debut As Long
        Dim fin As Long
        debut = stack.Keys(0)
        fin = stack.Items(0)
        stack.Remove debut
        
        Dim i As Long
        Dim j As Long
        Dim pivot As Variant
        Dim temp As Variant
        
        i = debut
        j = fin
        pivot = tableau((debut + fin) \ 2, colonne)
        
        ' Partitionnement du tableau
        Do While i <= j
            If triCroissant Then
                Do While CompareValues(tableau(i, colonne), pivot) < 0
                    i = i + 1
                Loop
                Do While CompareValues(tableau(j, colonne), pivot) > 0
                    j = j - 1
                Loop
            Else
                Do While CompareValues(tableau(i, colonne), pivot) > 0
                    i = i + 1
                Loop
                Do While CompareValues(tableau(j, colonne), pivot) < 0
                    j = j - 1
                Loop
            End If
            
            If i <= j Then
                ' Échanger les lignes dans le tableau
                For k = LBound(tableau, 2) To UBound(tableau, 2)
                    temp = tableau(i, k)
                    tableau(i, k) = tableau(j, k)
                    tableau(j, k) = temp
                Next k
                
                i = i + 1
                j = j - 1
            End If
        Loop
        
        If debut < j Then stack.Add debut, j
        If i < fin Then stack.Add i, fin
    Loop
    
    QuickSortTableau = tableau
End Function


Function CompareValues(ByVal val1 As Variant, ByVal val2 As Variant) As Integer
    If IsNumeric(val1) And IsNumeric(val2) Then
        If val1 < val2 Then
            CompareValues = -1
        ElseIf val1 > val2 Then
            CompareValues = 1
        Else
            CompareValues = 0
        End If
    Else
        CompareValues = StrComp(CStr(val1), CStr(val2), vbTextCompare)
    End If
End Function


# sql

Sub CompterVG(ByVal rs As Object, ByVal nomColonne As String)

    Dim countVG As Long
    Dim countNonVG As Long
    Dim valeur As Variant
    
    countVG = 0
    countNonVG = 0
    
    ' Parcours du recordset
    rs.MoveFirst
    Do Until rs.EOF
        valeur = rs.Fields(nomColonne).Value
        
        ' Vérification si la valeur est numérique
        If IsNumeric(valeur) Then
            countVG = countVG + 1 ' Incrémenter le compteur de valeurs trouvées (VG)
        Else
            countNonVG = countNonVG + 1 ' Incrémenter le compteur de valeurs non trouvées (non VG)
        End If
        
        rs.MoveNext
    Loop
    
    ' Affichage des résultats
    MsgBox "Nombre de valeurs trouvées (VG): " & countVG & vbCrLf & _
           "Nombre de valeurs non trouvées: " & countNonVG
    
End Sub


Sub CompterVG(ByVal rs As Object)

    ' Charger les données du recordset dans un tableau
    Dim tableau As Variant
    tableau = rs.GetRows

    Dim countVG As Long
    Dim countNonVG As Long
    Dim i As Long
    Dim valeur As Variant
    
    countVG = 0
    countNonVG = 0
    
    ' Parcourir le tableau pour compter les occurrences de VG et non VG
    For i = LBound(tableau, 2) To UBound(tableau, 2)
        valeur = tableau(0, i) ' Supposant que vous souhaitez compter les occurrences dans la première ligne du tableau
        If IsNumeric(valeur) Then
            countVG = countVG + 1 ' Incrémenter le compteur de valeurs trouvées (VG)
        Else
            countNonVG = countNonVG + 1 ' Incrémenter le compteur de valeurs non trouvées (non VG)
        End If
    Next i
    
    ' Afficher les résultats
    MsgBox "Nombre de valeurs trouvées (VG): " & countVG & vbCrLf & _
           "Nombre de valeurs non trouvées: " & countNonVG
    
End Sub