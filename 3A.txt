' ## Pull data from a Closed Workbook 
'    (Pass the Filepath, Filename, Sheet Name, Range and the Sheet that you want to pull the Data into):
' ## Call the Function, the Range to add the Data to in your ActiveSheet is the same as the Range to pull
'    the Data from the Closed Workbook, but you can easily tweak this.
GetValuesFromAClosedWorkbook "C:\users\Paradigm\Desktop", "BloodPressureTracker.xlsx", "Daily Record", "B10:G1000", "Sheet1"
 
' ## GetValuesFromAClosedWorkbook, retrieves Special Values for data in a Closed Excel Workbook
Private Sub GetValuesFromAClosedWorkbook(ByVal strFilepath As String, ByVal strFilename As String, ByVal strSheet As String, ByVal strRange As String, ByVal strActiveSheet As String)
    With Sheets(strActiveSheet).Range(strRange)
        .FormulaArray = "='" & strFilepath & "\[" & strFilename & "]" & strSheet & "'!" & strRange
        .Value = .Value
    End With
End Sub


'==================================================================================================
' ## Import CSV subroutine example providing parameters
'    parameters: file path, destination workbook name, destination sheet name, starting row (B=2),
'                starting column number and the delimiter
'==================================================================================================
Sub StartImportCSV()
    ImportCSVFile "C:\SourceData.csv", _
                    ActiveWorkbook.Name, _
                    "Sheet1", _
                    4, 2, ","
End Sub

'==================================================================================================
' ## Function to import CSV file data to a workbook
'==================================================================================================
Function ImportCSVFile(ByVal filePath As String, _
                       ByVal wbName As String, _
                       ByVal DestSheet As String, _
                       ByVal ImportToRow As Long, _
                       ByVal StartColumn As Long, _
                       ByVal strDelimiter As String)
                       
    '// vars
    Dim line As String
    Dim arrayOfElements
    Dim element As Variant
    Dim fileCol As Long
    Open filePath For Input As #1                       ' Open file for input
        Do While Not EOF(1)                             ' Loop until end of file
            ImportToRow = ImportToRow + 1
            Line Input #1, line
            arrayOfElements = Split(line, strDelimiter) 'Split the line into the array.
            fileCol = StartColumn
            
            '// Loop thorugh every element in the array and print to Excelfile
            For Each element In arrayOfElements
                Workbooks(wbName).Sheets(DestSheet).Cells(ImportToRow, fileCol).Value = element
                fileCol = fileCol + 1
            Next
        Loop
    Close #1 ' Close file.
End Function

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXbin

Sub ImportDataFromClosedWorkbookOptimized()
    Dim conn As Object
    Dim rs As Object
    Dim filePath As String
    Dim sheetName As String
    Dim rangeAddress As String
    Dim query As String
    Dim targetSheet As Worksheet
    Dim targetRange As Range
    On Error GoTo CleanExit ' Gestion des erreurs
    
    ' Définir le chemin du fichier Excel fermé
    filePath = "C:\Chemin\vers\le\fichier.xlsx"
    ' Nom de la feuille de calcul dans le fichier Excel fermé
    sheetName = "Feuil1"
    ' Plage de données à récupérer, par exemple A1:C10
    rangeAddress = "A1:C10"
    
    ' Construction de la requête SQL pour extraire la plage de données
    query = "SELECT * FROM [" & sheetName & "$" & rangeAddress & "]"
    
    ' Initialisation de la connexion ADO
    Set conn = CreateObject("ADODB.Connection")
    conn.ConnectionString = _
        "Provider=Microsoft.ACE.OLEDB.12.0;" & _
        "Data Source=" & filePath & ";" & _
        "Extended Properties=""Excel 12.0 Xml;HDR=Yes"";"
    
    ' Ouverture de la connexion
    conn.Open
    
    ' Initialisation du recordset pour exécuter la requête
    Set rs = CreateObject("ADODB.Recordset")
    rs.Open query, conn, 0, 1 ' Ouverture en lecture seule
    
    ' Définir la feuille cible dans laquelle les données seront copiées
    Set targetSheet = ThisWorkbook.Sheets("Feuil1")
    ' Définir la plage de destination (première cellule)
    Set targetRange = targetSheet.Range("A1")
    
    ' Copie des données du recordset directement dans la plage cible
    If Not rs.EOF Then
        targetRange.CopyFromRecordset rs
    End If

CleanExit:
    ' Fermeture et nettoyage des objets ADO
    On Error Resume Next
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    If Not conn Is Nothing Then
        conn.Close
        Set conn = Nothing
    End If
    On Error GoTo 0
End Sub


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


Sub GetDataFromClosedWorkbook_Faster()
    Dim wbSource As Workbook
    Dim wsSource As Worksheet
    Dim targetSheet As Worksheet
    Dim filePath As String
    Dim xlApp As Excel.Application
    
    ' Chemin vers le fichier fermé
    filePath = "C:\users\Paradigm\Desktop\BloodPressureTracker.xlsx"
    
    ' Feuille cible dans laquelle les données seront copiées
    Set targetSheet = ThisWorkbook.Sheets("Sheet1")
    
    ' Initialiser une instance cachée d'Excel
    Set xlApp = New Excel.Application
    xlApp.Visible = False
    xlApp.DisplayAlerts = False
    
    ' Ouvrir le fichier source en lecture seule
    Set wbSource = xlApp.Workbooks.Open(filePath, ReadOnly:=True)
    
    ' Copier la plage de données depuis le fichier source
    Set wsSource = wbSource.Sheets("Daily Record")
    wsSource.Range("B10:G1000").Copy ' Copier la plage
    
    ' Coller les données dans la feuille cible
    targetSheet.Range("B10").PasteSpecial Paste:=xlPasteValues ' Coller uniquement les valeurs
    
    ' Nettoyage
    Application.CutCopyMode = False
    wbSource.Close False
    xlApp.Quit
    Set xlApp = Nothing
End Sub
'''''''''''''''''''''''''''''CSV''''''''''''''''''''''''''''''''''''''

Sub ImportCSVUsingQueryTable()
    Dim filePath As String
    Dim targetSheet As Worksheet
    Dim qt As QueryTable

    ' Chemin du fichier CSV
    filePath = "C:\Chemin\vers\le\fichier.csv"
    
    ' Définir la feuille cible pour importer les données
    Set targetSheet = ThisWorkbook.Sheets("Feuil1")
    
    ' Effacer les données existantes
    targetSheet.Cells.Clear
    
    ' Créer une QueryTable pour importer le fichier CSV
    Set qt = targetSheet.QueryTables.Add(Connection:="TEXT;" & filePath, Destination:=targetSheet.Range("A1"))
    
    ' Configurer les options d'importation
    With qt
        .TextFileParseType = xlDelimited
        .TextFileCommaDelimiter = True ' CSV = délimiteur virgule
        .TextFileColumnDataTypes = Array(1) ' Toutes les colonnes sont importées en tant que texte
        .Refresh BackgroundQuery:=False ' Importer immédiatement
    End With
    
    ' Nettoyage
    Set qt = Nothing
End Sub


Sub ImportCSVUsingADO()
    Dim conn As Object
    Dim rs As Object
    Dim filePath As String
    Dim query As String
    Dim targetSheet As Worksheet
    Dim rowNum As Long
    
    ' Chemin du dossier contenant le fichier CSV
    filePath = "C:\Chemin\vers\le\fichier.csv"
    
    ' Définir la feuille cible pour les données
    Set targetSheet = ThisWorkbook.Sheets("Feuil1")
    
    ' Créer l'objet ADO Connection
    Set conn = CreateObject("ADODB.Connection")
    
    ' Configuration de la connexion pour un fichier CSV
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & Left(filePath, InStrRev(filePath, "\")) & ";" & _
                            "Extended Properties='text;HDR=Yes;FMT=Delimited'"
    conn.Open
    
    ' Créer la requête pour lire le fichier CSV
    query = "SELECT * FROM [" & Mid(filePath, InStrRev(filePath, "\") + 1) & "]"
    
    ' Créer et ouvrir le recordset ADO
    Set rs = CreateObject("ADODB.Recordset")
    rs.Open query, conn
    
    ' Copier les données dans la feuille Excel
    targetSheet.Cells(1, 1).CopyFromRecordset rs
    
    ' Fermer et nettoyer
    rs.Close
    conn.Close
    Set rs = Nothing
    Set conn = Nothing
End Sub

