Sub FetchRHistoryData()
    Dim ws As Worksheet
    Dim isinArray As Variant
    Dim fieldArray As Variant
    Dim isinCount As Long
    Dim i As Long, j As Long
    Dim groupSize As Long
    Dim currentCol As Long
    Dim isinGroup As String
    Dim formulaArray() As String
    Dim formula As String
    Dim totalGroups As Long
    Dim numFields As Long
    Dim numColsForGroup As Long
    Dim formulaIndex As Long
    Dim outputRange As Range
    
    ' Initialisation des variables
    Set ws = ThisWorkbook.Sheets("Feuil1") ' Feuille cible, modifiez selon vos besoins
    isinArray = Array("ISIN1", "ISIN2", "ISIN3", "ISIN4", "ISIN5", "ISIN6", ...) ' Remplacez par vos codes ISIN
    fieldArray = Array("Timestamp", ".close", "trdrc_1.Volume") ' Remplacez par vos champs
    isinCount = UBound(isinArray) - LBound(isinArray) + 1
    groupSize = 255 ' Limite des ISIN par groupe
    currentCol = 1 ' Colonne de départ pour insérer les formules
    numFields = UBound(fieldArray) - LBound(fieldArray) + 1 ' Nombre de champs

    ' Calcul du nombre total de groupes
    totalGroups = ((isinCount - 1) \ groupSize) + 1
    
    ' Redimensionner le tableau des formules pour stocker toutes les formules
    ReDim formulaArray(1 To 1, 1 To totalGroups)
    
    formulaIndex = 1 ' Initialiser l'index pour le tableau des formules
    
    ' Boucle pour diviser les ISIN en groupes de 255
    For i = 0 To isinCount - 1 Step groupSize
        ' Calcul de la taille du groupe
        If i + groupSize > isinCount Then
            groupSize = isinCount - i
        End If
        
        ' Construire le groupe d'ISINs
        isinGroup = Join(Application.Index(isinArray, Evaluate("ROW(" & i + 1 & ":" & i + groupSize & ")")), ",")
        
        ' Créer la formule RHistory avec le groupe d'ISINs et les champs associés
        formula = "=RHistory(""" & isinGroup & """, """ & Join(fieldArray, ",") & """, ""nbrows:10,interval:1d,sort:asc,ch:fd"")"
        
        ' Stocker la formule dans le tableau
        formulaArray(1, formulaIndex) = formula
        
        ' Calcul du nombre de colonnes générées par la formule
        numColsForGroup = groupSize * numFields
        
        ' Décaler la colonne de départ pour la prochaine formule
        currentCol = currentCol + numColsForGroup
        
        ' Incrémenter l'index du tableau de formules
        formulaIndex = formulaIndex + 1
    Next i
    
    ' Insérer toutes les formules dans une seule fois en partant de la cellule A1
    ' Utiliser "Resize" pour ajuster les colonnes en fonction du nombre de formules
    Set outputRange = ws.Cells(1, 1).Resize(1, UBound(formulaArray, 2))
    
    ' Appliquer les formules dans toutes les cellules du tableau
    outputRange.Formula = formulaArray
End Sub


# 2

Sub FetchRHistoryDataOptimized()
    Dim ws As Worksheet
    Dim isinArray As Variant
    Dim fieldArray As Variant
    Dim isinCount As Long
    Dim i As Long
    Dim groupSize As Long
    Dim currentCol As Long
    Dim formulaArray() As String
    Dim formula As String
    Dim totalGroups As Long
    Dim numFields As Long
    Dim numColsForGroup As Long
    Dim formulaIndex As Long
    Dim groupEnd As Long
    Dim outputRange As Range
    Dim groupIsin As String

    ' Désactiver les mises à jour d'écran et les calculs automatiques pour améliorer la performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' Initialisation des variables
    Set ws = ThisWorkbook.Sheets("Feuil1") ' Feuille cible, modifiez selon vos besoins
    isinArray = Array("ISIN1", "ISIN2", "ISIN3", "ISIN4", "ISIN5", "ISIN6") ' Remplacez par vos codes ISIN
    fieldArray = Array("Timestamp", ".close", "trdrc_1.Volume") ' Remplacez par vos champs
    isinCount = UBound(isinArray) - LBound(isinArray) + 1
    groupSize = 255 ' Limite des ISIN par groupe
    currentCol = 1 ' Colonne de départ pour insérer les formules
    numFields = UBound(fieldArray) - LBound(fieldArray) + 1 ' Nombre de champs

    ' Calcul du nombre total de groupes
    totalGroups = ((isinCount - 1) \ groupSize) + 1

    ' Redimensionner le tableau des formules pour stocker toutes les formules
    ReDim formulaArray(1 To totalGroups)

    formulaIndex = 1 ' Initialiser l'index pour le tableau des formules

    ' Boucle pour diviser les ISIN en groupes de 255
    For i = 0 To isinCount - 1 Step groupSize
        ' Calcul de la taille du groupe
        groupEnd = Application.Min(isinCount, i + groupSize)

        ' Construire le groupe d'ISINs sans utiliser Evaluate
        groupIsin = Join(Application.Index(isinArray, Evaluate("ROW(" & i + 1 & ":" & groupEnd & ")")), ",")

        ' Créer la formule RHistory avec le groupe d'ISINs et les champs associés
        formula = "=RHistory(""" & groupIsin & """, """ & Join(fieldArray, ",") & """, ""nbrows:10,interval:1d,sort:asc,ch:fd"")"

        ' Calculer le nombre de colonnes générées par ce groupe
        numColsForGroup = (groupEnd - i) * numFields ' (nombre d'ISIN dans le groupe) * (nombre de champs)

        ' Insérer la formule dans la feuille à la position correcte
        Set outputRange = ws.Cells(1, currentCol).Resize(1, numColsForGroup)
        outputRange.Formula = formula

        ' Décaler la colonne pour la prochaine formule
        currentCol = currentCol + numColsForGroup

        ' Incrémenter l'index du tableau de formules
        formulaIndex = formulaIndex + 1
    Next i

    ' Rétablir les mises à jour d'écran et les calculs automatiques
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

# top

Sub FetchRHistoryDataOptimized()
    Dim ws As Worksheet
    Dim isinArray As Variant
    Dim fieldArray As Variant
    Dim isinCount As Long
    Dim i As Long
    Dim currentCol As Long
    Dim formula As String
    Dim outputRange As Range
    Dim groupIsin As String
    Dim params As String
    Dim totalFormulaLength As Long
    Dim numFields As Long

    ' Désactiver les mises à jour d'écran et les calculs automatiques pour améliorer la performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' Initialisation des variables
    Set ws = ThisWorkbook.Sheets("Feuil1") ' Feuille cible, modifiez selon vos besoins
    isinArray = Array("ISIN1", "ISIN2", "ISIN3", "ISIN4", "ISIN5", "ISIN6") ' Remplacez par vos codes ISIN
    fieldArray = Array("Timestamp", ".close", "trdrc_1.Volume") ' Remplacez par vos champs
    isinCount = UBound(isinArray) - LBound(isinArray) + 1
    currentCol = 1 ' Colonne de départ pour insérer les formules
    numFields = UBound(fieldArray) - LBound(fieldArray) + 1 ' Nombre de champs
    params = """nbrows:10,interval:1d,sort:asc,ch:fd""" ' Paramètres de la formule

    ' Construction progressive de la formule
    groupIsin = ""
    totalFormulaLength = 0
    Dim numColsForGroup As Long

    For i = LBound(isinArray) To UBound(isinArray)
        ' Ajouter l'ISIN actuel à la liste
        If groupIsin = "" Then
            groupIsin = isinArray(i)
        Else
            groupIsin = groupIsin & "," & isinArray(i)
        End If

        ' Créer la formule avec les ISINs accumulés
        formula = "=RHistory(""" & groupIsin & """, """ & Join(fieldArray, ",") & """, " & params & ")"

        ' Vérifier la longueur totale de la formule
        totalFormulaLength = Len(formula)

        ' Si la longueur dépasse 255, retirer l'ISIN ajouté et insérer la formule
        If totalFormulaLength > 255 Then
            ' Retirer le dernier ISIN ajouté
            groupIsin = Left(groupIsin, InStrRev(groupIsin, ",") - 1)
            ' Créer la formule avec le groupe d'ISINs
            formula = "=RHistory(""" & groupIsin & """, """ & Join(fieldArray, ",") & """, " & params & ")"

            ' Calculer le nombre de colonnes générées par ce groupe
            numColsForGroup = UBound(Split(groupIsin, ",")) + 1 * numFields

            ' Insérer la formule dans la feuille à la position correcte
            Set outputRange = ws.Cells(1, currentCol).Resize(1, numColsForGroup)
            outputRange.Formula = formula

            ' Réinitialiser pour le prochain groupe
            currentCol = currentCol + numColsForGroup
            groupIsin = isinArray(i) ' Démarrer un nouveau groupe avec l'ISIN actuel
        End If
    Next i

    ' Insérer la dernière formule si nécessaire
    If groupIsin <> "" Then
        formula = "=RHistory(""" & groupIsin & """, """ & Join(fieldArray, ",") & """, " & params & ")"
        numColsForGroup = UBound(Split(groupIsin, ",")) + 1 * numFields
        Set outputRange = ws.Cells(1, currentCol).Resize(1, numColsForGroup)
        outputRange.Formula = formula
    End If

    ' Rétablir les mises à jour d'écran et les calculs automatiques
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

# top top

Sub FetchRHistoryDataOptimized()
    Dim ws As Worksheet
    Dim isinArray As Variant
    Dim fieldArray As Variant
    Dim currentCol As Long
    Dim formula As String
    Dim outputRange As Range
    Dim groupIsin As String
    Dim params As String
    Dim totalFormulaLength As Long
    Dim numFields As Long
    Dim i As Long
    Dim numColsForGroup As Long

    ' Désactiver les mises à jour d'écran et les calculs automatiques pour améliorer la performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' Initialisation des variables
    Set ws = ThisWorkbook.Sheets("Feuil1") ' Feuille cible, modifiez selon vos besoins
    isinArray = Array("ISIN1", "ISIN2", "ISIN3", "ISIN4", "ISIN5", "ISIN6") ' Remplacez par vos codes ISIN
    fieldArray = Array("Timestamp", ".close", "trdrc_1.Volume") ' Remplacez par vos champs
    currentCol = 1 ' Colonne de départ pour insérer les formules
    numFields = UBound(fieldArray) + 1 ' Nombre de champs
    params = """nbrows:10,interval:1d,sort:asc,ch:fd""" ' Paramètres de la formule

    ' Construction progressive de la formule
    groupIsin = ""
    totalFormulaLength = 0

    For i = LBound(isinArray) To UBound(isinArray)
        ' Ajouter l'ISIN actuel à la liste
        If groupIsin <> "" Then groupIsin = groupIsin & ","
        groupIsin = groupIsin & isinArray(i)

        ' Créer la formule avec les ISINs accumulés
        formula = "=RHistory(""" & groupIsin & """, """ & Join(fieldArray, ",") & """, " & params & ")"
        
        ' Vérifier la longueur totale de la formule
        totalFormulaLength = Len(formula)

        ' Si la longueur dépasse 255, retirer le dernier ISIN ajouté et insérer la formule
        If totalFormulaLength > 255 Then
            ' Retirer le dernier ISIN ajouté
            groupIsin = Left(groupIsin, InStrRev(groupIsin, ",") - 1)

            ' Créer la formule avec le groupe d'ISINs
            formula = "=RHistory(""" & groupIsin & """, """ & Join(fieldArray, ",") & """, " & params & ")"

            ' Calculer le nombre de colonnes générées par ce groupe
            numColsForGroup = UBound(Split(groupIsin, ",")) + 1 * numFields

            ' Insérer la formule dans la feuille à la position correcte
            Set outputRange = ws.Cells(1, currentCol).Resize(1, numColsForGroup)
            outputRange.Formula = formula

            ' Décaler la colonne pour la prochaine formule
            currentCol = currentCol + numColsForGroup
            groupIsin = isinArray(i) ' Démarrer un nouveau groupe avec l'ISIN actuel
        End If
    Next i

    ' Insérer la dernière formule si nécessaire
    If groupIsin <> "" Then
        formula = "=RHistory(""" & groupIsin & """, """ & Join(fieldArray, ",") & """, " & params & ")"
        numColsForGroup = UBound(Split(groupIsin, ",")) + 1 * numFields
        Set outputRange = ws.Cells(1, currentCol).Resize(1, numColsForGroup)
        outputRange.Formula = formula
    End If

    ' Rétablir les mises à jour d'écran et les calculs automatiques
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub
