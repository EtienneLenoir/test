



Function ReadCSVtoArray(filePath As String) As Variant
    Dim fso As Object, file As Object
    Dim line As String, arr() As String
    Dim result() As Variant, i As Long
    
    ' Ouvrir le fichier
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set file = fso.OpenTextFile(filePath, 1)

    ' Lire tout le fichier en mémoire
    i = 0
    Do Until file.AtEndOfStream
        line = file.ReadLine
        arr = Split(line, ",") ' Convertir en tableau
        If i = 0 Then
            ReDim result(0 To 0, 0 To UBound(arr)) ' Définir la taille
        Else
            ReDim Preserve result(0 To i, 0 To UBound(arr))
        End If
        result(i, 0) = arr(0) ' Exemple : Stocke la première colonne
        result(i, 1) = arr(1) ' Deuxième colonne...
        i = i + 1
    Loop
    file.Close
    
    ReadCSVtoArray = result
End Function

Function FilterCSVByColumn(csvData As Variant, colIndex As Integer, filterValue As String) As Variant
    Dim i As Long, rowCount As Long, newArr() As Variant
    Dim filteredCount As Long
    
    rowCount = UBound(csvData, 1)
    filteredCount = 0

    ' Filtrage en mémoire
    ReDim newArr(0 To rowCount, 0 To UBound(csvData, 2))
    
    For i = 0 To rowCount
        If csvData(i, colIndex) = filterValue Then
            newArr(filteredCount, 0) = csvData(i, 0) ' Copier la ligne filtrée
            newArr(filteredCount, 1) = csvData(i, 1)
            filteredCount = filteredCount + 1
        End If
    Next i

    ' Redimensionner le tableau final
    ReDim Preserve newArr(0 To filteredCount - 1, 0 To UBound(csvData, 2))
    FilterCSVByColumn = newArr
End Function

Sub TestFilterCSV()
    Dim data As Variant, filteredData As Variant
    Dim i As Long

    ' Lire le CSV
    data = ReadCSVtoArray("C:\chemin\vers\tonfichier.csv")

    ' Filtrer les lignes où la colonne 1 (Index 0) contient "Paris"
    filteredData = FilterCSVByColumn(data, 0, "Paris")

    ' Afficher les résultats filtrés
    For i = 0 To UBound(filteredData, 1)
        Debug.Print filteredData(i, 0), filteredData(i, 1)
    Next i
End Sub














''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub ExporterVersPDF()
    Dim ws As Worksheet
    Dim pdfFilePath As String
    Dim lastRow As Long
    Dim lastCol As Long
    Dim pageRange As Range

    ' Définir la feuille de calcul source
    Set ws = ThisWorkbook.Sheets("Feuille1") ' Remplacez "Feuille1" par le nom de votre feuille

    ' Déterminer la dernière ligne et la dernière colonne utilisées
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column

    ' Définir la plage à exporter en PDF
    Set pageRange = ws.Range(ws.Cells(1, 1), ws.Cells(lastRow, lastCol))

    ' Ajuster la largeur des colonnes pour qu'elles tiennent sur une page A4
    ws.PageSetup.Zoom = False
    ws.PageSetup.FitToPagesWide = 1
    ws.PageSetup.FitToPagesTall = False

    ' Définir le chemin du fichier PDF
    pdfFilePath = ThisWorkbook.Path & "\ExportedFile.pdf"

    ' Exporter la plage en PDF
    pageRange.ExportAsFixedFormat Type:=xlTypePDF, Filename:=pdfFilePath, Quality:=xlQualityStandard, _
        IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:=True

    MsgBox "Le fichier PDF a été créé avec succès à l'emplacement suivant : " & pdfFilePath
End Sub


Sub ImportCSVUsingArray()

    Dim fso As Object
    Dim ts As Object
    Dim textLine As String
    Dim dataArr As Variant
    Dim resultArr() As Variant
    Dim ws As Worksheet
    Dim csvFilePath As String
    Dim i As Long, j As Long
    Dim numRows As Long
    Dim numCols As Long

    ' Chemin vers le fichier CSV
    csvFilePath = "C:\path_to_your_file\file.csv" ' À modifier avec votre chemin
    
    ' Initialiser le FileSystemObject pour lire le fichier
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.OpenTextFile(csvFilePath, 1, False)
    
    ' Lire le fichier CSV ligne par ligne et déterminer le nombre de lignes
    numRows = 0
    Do Until ts.AtEndOfStream
        ts.ReadLine
        numRows = numRows + 1
    Loop
    
    ' Réinitialiser le fichier au début
    ts.Close
    Set ts = fso.OpenTextFile(csvFilePath, 1, False)
    
    ' Créer un tableau basé sur le nombre de lignes détectées
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Modifier pour la feuille appropriée
    ReDim resultArr(1 To numRows, 1 To 1) ' Initialiser le tableau avec au moins une colonne

    ' Remplir le tableau avec les données CSV
    i = 1
    Do Until ts.AtEndOfStream
        textLine = ts.ReadLine
        dataArr = Split(textLine, ",")
        
        ' Redimensionner dynamiquement le tableau si nécessaire
        If UBound(dataArr) + 1 > numCols Then
            numCols = UBound(dataArr) + 1
            ReDim Preserve resultArr(1 To numRows, 1 To numCols)
        End If
        
        ' Stocker la ligne dans le tableau
        For j = LBound(dataArr) To UBound(dataArr)
            resultArr(i, j + 1) = Trim(dataArr(j))
        Next j
        
        i = i + 1
    Loop
    
    ' Écrire tout le tableau dans la feuille Excel en une seule opération
    ws.Range(ws.Cells(1, 1), ws.Cells(numRows, numCols)).Value = resultArr

    ' Fermeture du fichier et nettoyage
    ts.Close
    Set ts = Nothing
    Set fso = Nothing

End Sub



Dim ObjShell As Object
Dim PythonExe, PythonScript As String
 
Set ObjShell = VBA.CreateObject("Wscript.Shell")
PythonExe = """C:\Users\Laurent\Anaconda3\python.exe"""
PythonScript = ThisWorkbook.Path & "\Test_Py_to_VBA.py"
 
Dim command As String
Dim exec As Object
Dim output As Object
     
command = PythonExe & " " & PythonScript
Set exec = ObjShell.exec(command)
Set output = exec.StdOut
     
mavaleur = output.ReadLine
     
Range("B2") = mavaleur
 
Sub ImportCSV()
Dim ws As Worksheet
Dim filePath As String
Dim line As String
Dim row As Integer
Dim col As Integer
Dim data() As String
Set ws = ThisWorkbook.Sheets("Data")
filePath = "C:\example\data.csv"
row = 1
Open filePath For Input As #1
Do While Not EOF(1)
Line Input #1, line
data = Split(line, ",")
For col = LBound(data) To UBound(data)
ws.Cells(row, col + 1).Value = data(col)
Next col
row = row + 1
Loop
Close #1
End Sub

```vb
Sub AutomatedDataImport()
Dim ws As Worksheet
Set ws = ThisWorkbook.Sheets("Market Data")
Dim csvFilePath As String
csvFilePath = "C:\Data\DailyStockMarket.csv"
With ws.QueryTables.Add(Connection:="TEXT;" & csvFilePath,
Destination:=ws.Range("A1"))
.TextFileParseType = xlDelimited
.TextFileConsecutiveDelimiter = False
.TextFileTabDelimiter = False
.TextFileSemicolonDelimiter = False
.TextFileCommaDelimiter = True
.TextFilePlatform = xlWindows
.TextFileColumnDataTypes = Array(1, 2, 4)
.Refresh
End With
End Sub
```

Sub ImportMultipleDataFiles()
Dim ws As Worksheet
Set ws = ThisWorkbook.Sheets("Market Data")
Dim fileNames As Variant
fileNames = Array("Stocks.csv", "Bonds.csv", "Commodities.csv")
Dim fileName As Variant
For Each fileName In fileNames
		Dim fullPath As String
fullPath = "C:\Data\" & fileName
' Assume the data structure is consistent for simplicity
With ws.QueryTables.Add(Connection:="TEXT;" & fullPath,
Destination:=ws.Range("A" & Rows.Count).End(xlUp).Offset(1, 0))
.TextFileParseType = xlDelimited
.TextFileCommaDelimiter = True
.Refresh
End With
Next fileName
End Sub


Function CalculateMovingAverage(dataRange As Range, period As
Integer) As Variant
Dim sum As Double
Dim movingAverage() As Double
ReDim movingAverage(1 To dataRange.Cells.Count - period + 1)
For i = 1 To dataRange.Cells.Count - period + 1
sum = 0
For j = i To i + period - 1
sum = sum + dataRange(j)
Next j
movingAverage(i) = sum / period
Next i
CalculateMovingAverage = movingAverage
End Function

Function CalculateCovariance(range1 As Range, range2 As Range) As
Double
Dim mean1 As Double, mean2 As Double
Dim sumProduct As Double
Dim count As Integer
mean1 = Application.WorksheetFunction.Average(range1)
mean2 = Application.WorksheetFunction.Average(range2)
count = Application.WorksheetFunction.Count(range1)
For i = 1 To count
sumProduct = sumProduct + ((range1.Cells(i).Value - mean1) *
(range2.Cells(i).Value - mean2))
Next i
CalculateCovariance = sumProduct / (count - 1)
End Function


```vba
' Example of a VBA function to calculate accrued interest on a bond
Public Function AccruedInterest(startDate As Date, endDate As Date,
annualCouponRate As Double, faceValue As Double, dayCountConvention
As String) As Double
Dim daysCount As Long
Dim yearBasis As Double
' Determine the day count basis
Select Case dayCountConvention
Case "actual/360"
daysCount = DateDiff("d", startDate, endDate)
yearBasis = 360
Case "30/360"
daysCount = 30 * (Month(endDate) - Month(startDate)) +
(Day(endDate) - Day(startDate))
yearBasis = 360
Case "actual/365"
daysCount = DateDiff("d", startDate, endDate)
yearBasis = 365
' Add additional day count conventions as needed
Case Else
AccruedInterest = CVErr(xlErrValue)
Exit Function
End Select
' Calculate accrued interest
AccruedInterest = faceValue * (annualCouponRate / yearBasis) *
daysCount
End Function
```

```vba
' Example VBA function to generate a schedule of future coupon payment
dates
Public Function CouponPaymentSchedule(startDate As Date, maturityDate
As Date, frequency As Integer) As Collection
Dim paymentDates As New Collection
Dim period As String
Dim counter As Integer
' Determine the period based on frequency of payments per year
Select Case frequency
Case 1
period = "yyyy"
Case 2
period = "m"
Case 4
period = "q"
' Add additional frequencies as needed
Case Else
Set CouponPaymentSchedule = Nothing
Exit Function
End Select
' Generate the schedule of payment dates
Do While startDate < maturityDate
startDate = DateAdd(period, 12 / frequency, startDate)
If startDate <= maturityDate Then
paymentDates.Add startDate
End If
Loop
Set CouponPaymentSchedule = paymentDates
End Function
```

```vba
' Example VBA function for custom day count calculations
Public Function CustomDayCount(startDate As Date, endDate As Date,
convention As String) As Long
Dim dayCount As Long
Select Case convention
Case "30/360", "Bond Basis"
dayCount = (360 * (Year(endDate) - Year(startDate))) + _
(30 * (Month(endDate) - Month(startDate))) + _
(Day(endDate) - Day(startDate))
' Adjust for 30E/360 convention if necessary
Case "actual/actual", "ISDA"
dayCount = DateDiff("d", startDate, endDate)
' Additional logic for leap years can be incorporated here
Case "actual/360"
dayCount = DateDiff("d", startDate, endDate)
Case "actual/365"
dayCount = DateDiff("d", startDate, endDate)
' Additional custom conventions can be added here
Case Else
dayCount = -1 ' Error code for unrecognized convention
End Select
CustomDayCount = dayCount
End Function
```


```vba
' Example VBA function for adjusting to the next business day
Public Function AdjustToBusinessDay(inputDate As Date) As Date
Dim adjustedDate As Date
adjustedDate = inputDate
' Check if the date falls on a weekend
While Weekday(adjustedDate, vbMonday) > 5
' Move to the next day
adjustedDate = DateAdd("d", 1, adjustedDate)
Wend
' Here, one could also add checks for public holidays
' Logic to adjust for specific financial market holidays would also be
included
AdjustToBusinessDay = adjustedDate
End Function
```


' Example VBA function to perform linear regression
Function LinearRegression(rngX As Range, rngY As Range) As Dictionary
Dim dict As Object
Set dict = CreateObject("Scripting.Dictionary")
Dim sumX As Double, sumY As Double, sumXY As Double, sumX2
As Double
Dim n As Long, i As Long
n = rngX.Cells.Count
' Calculate the sums needed for the coefficients
For i = 1 To n
sumX = sumX + rngX.Cells(i, 1).Value
sumY = sumY + rngY.Cells(i, 1).Value
sumXY = sumXY + rngX.Cells(i, 1).Value * rngY.Cells(i, 1).Value
sumX2 = sumX2 + rngX.Cells(i, 1).Value ^ 2
Next i
' Calculate the regression coefficients
Dim slope As Double
Dim intercept As Double
slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX ^ 2)
intercept = (sumY - slope * sumX) / n
' Add coefficients to the dictionary
dict.Add "slope", slope
dict.Add "intercept", intercept
Set LinearRegression = dict
End Function


' Example VBA procedure for multiple regression analysis
Sub MultipleRegression(rngDependent As Range, rngIndependents As
Range)
Dim regressionStats As Object
Set regressionStats =
Application.WorksheetFunction.LinEst(rngDependent, rngIndependents,
True, True)
' Extract the regression statistics from the LinEst function
Dim coefficients As Variant
Dim stats As Variant
coefficients = Application.Index(regressionStats, 1, 0)
stats = Application.Index(regressionStats, 3, 0)
' Output the coefficients and stats to a specified range
Dim outputSheet As Worksheet
Set outputSheet = ThisWorkbook.Sheets("RegressionResults")
outputSheet.Range("B2").Resize(1, UBound(coefficients)).Value =
coefficients
outputSheet.Range("B3").Resize(1, UBound(stats)).Value = stats
' The output includes coefficients, standard errors, r-squared, and Fstatistic
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Private prv_db_path As String
Private my_private_command As ADODB.Command

Public Property Get db_path() As String
    If prv_db_path = "" Then
        prv_db_path = [rng_DB_path].value
    End If
    db_path = prv_db_path
End Property

Property Get cmd() As ADODB.Command
    If my_private_command Is Nothing Then
        Call DBACCESSLOCAL_OpenConnection(db_path)
    End If
    Set cmd = my_private_command
End Property


Public Sub DBACCESSLOCAL_OpenConnection(AccessDBPath As String)
    On Error GoTo errorhandler
    Dim myConn As ADODB.Connection
    Dim DSN_ As String, User_ As String, Password_ As String, Connection_ As String
    
    Dim PATHNAME As String, strConn As String
    strConn = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source= #DBPATH#"
    strConn = Replace(strConn, "#DBPATH#", AccessDBPath)
    Set myConn = New ADODB.Connection
    myConn.ConnectionString = strConn
    myConn.Open
    
    Set my_private_command = New ADODB.Command
    Set my_private_command.ActiveConnection = myConn
    
    Exit Sub
errorhandler:
    MsgBox Err.description
    End
End Sub



Private acces_command_ As ADODB.Command

Property Get AccessDBPath()
    AccessDBPath = ""
End Property

Property Get acces_command() As ADODB.Command
    If acces_command_ Is Nothing Then
        Set acces_command_ = DBACCESSLOCAL_OpenConnection
    End If
    Set acces_command = acces_command_
End Property

'Connector to Access
Public Function DBACCESSLOCAL_OpenConnection() As ADODB.Command
    Dim mycommand As ADODB.Command
    Dim myConn As ADODB.Connection
    Dim strConn As String
    Dim Database_Name As String
    Dim User_ID As String
    Dim Password As String

    On Error GoTo errorhandler

    Database_Name = ""
    Password = ""
    User_ID = ""
    strConn = "Driver={SQL Server};Server=" & AccessDBPath & ";Database=" & Database_Name & _
    ";Uid=" & User_ID & ";Pwd=" & Password & ";"
    Set myConn = New ADODB.Connection
    myConn.ConnectionString = strConn
    
    myConn.CommandTimeout = 45
    myConn.Open
    Set mycommand = New ADODB.Command
    Set mycommand.ActiveConnection = myConn
    Set DBACCESSLOCAL_OpenConnection = mycommand

    Exit Function
errorhandler:
    MsgBox Err.description
    Set DBACCESSLOCAL_OpenConnection = Nothing
    End
End Function


Public dEntites As Scripting.Dictionary
Public colToTal As Long
Public oFSO As New Scripting.FileSystemObject

Private dbx As DAO.Database
Private dbxc As DAO.Database


Public Property Get db() As DAO.Database
    
    
    If dbx Is Nothing Then
        Set dbx = DBEngine.OpenDatabase(wsParam.Range("rngDbPathLocal").value)
    End If
    Set db = dbx
        
End Property


'***************************************************************************************
' Procedure : Extract_Data_from_Access_to_XL
' DateTime  : 2017
' Author    : A. Goullant
' Purpose   : extraction de données depuis Access et l'affichage sur XL
'***************************************************************************************
Sub Extract_Data_from_Access_to_XL(mysheet As Worksheet, mySql As String)
    
    Dim rst As ADODB.Recordset
    Dim lOffset As Long
    Dim objField As Variant
    
    acces_command.CommandText = mySql
    Set rst = acces_command.Execute
    
    mysheet.Cells.Clear
    If Not rst.EOF Then

        With mysheet.Range("A1")
            For Each objField In rst.Fields
                .Offset(0, lOffset).value = objField.name
                lOffset = lOffset + 1
            Next objField
            .Resize(1, rst.Fields.count).Font.Bold = True
        End With
    
        mysheet.Range("A2").CopyFromRecordset rst
        rst.Close

    Else
        rst.Close
    End If
    Set rst = Nothing
    
End Sub

'***************************************************************************************
' Procedure : Func_Get_Id_Of_Deal
' DateTime  : 2017
' Author    : A. El Ouazzani
' Purpose   : Récupération de dealId suivant la strategyId et le type d'instrument
'***************************************************************************************
Public Function Func_Get_Id_Of_Deal(ByVal strategyID As String, ByVal instrumentType As String) As Long

    Dim strsql As String
    Dim rst As Recordset
    
    strsql = "select Deal_Id FROM Strategy_temp"
    strsql = strsql & " WHERE Strategies_ShortName='" & strategyID & "' AND Instrument_type='" & instrumentType & "'"
    
    acces_command.CommandText = strsql
    Set rst = acces_command.Execute
    
    If Not rst.EOF Then
        Func_Get_Id_Of_Deal = CLng(CStr(rst.Fields(0)))
    End If
    
    rst.Close

End Function


Function Get_nbr_Record(ByVal rst As Recordset) As Long

    Dim i As Long

    i = 0
    While Not rst.EOF
        i = i + 1
        rst.MoveNext
    Wend
    Get_nbr_Record = i
    




Sub OptimisationRapide()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim totalMarketValue As Double, totalMarketValueVG As Double, totalCash As Double
    Dim limiteEquity As Double, limiteBondsHY As Double, limiteUS As Double
    Dim applyLimitEquity As Boolean, applyLimitBondsHY As Boolean, applyLimitUS As Boolean
    Dim i As Long
    Dim quantiteActuelle As Double, quantiteNouvelle As Double
    Dim poidsActuel As Double, poidsMax As Double
    Dim sumMarketValue As Double, sumMarketValueVG As Double
    Dim sumMarketValueVG_Equity As Double, sumMarketValueVG_BondsHY As Double, sumMarketValueVG_US As Double
    Dim totalReduction As Double, totalReductionProportionnelle As Double
    Dim converged As Boolean

    ' Initialisation de la feuille et des limites
    Set ws = ThisWorkbook.Sheets("Feuille1")
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    totalCash = ws.Range("G1").Value
    limiteEquity = 0.35
    limiteBondsHY = 0.10
    limiteUS = 0.50

    ' Activer ou désactiver les limites
    applyLimitEquity = True  ' Appliquer la limite Equity
    applyLimitBondsHY = True ' Appliquer la limite Bonds HY
    applyLimitUS = True      ' Appliquer la limite US

    ' Charger les données dans un tableau Arr
    Dim Arr As Variant
    Arr = ws.Range("A2:G" & lastRow).Value ' Charger les données de la plage A2:G

    ' Initialisation des sommes globales
    sumMarketValue = 0
    sumMarketValueVG = 0
    sumMarketValueVG_Equity = 0
    sumMarketValueVG_BondsHY = 0
    sumMarketValueVG_US = 0

    ' Calcul des sommes initiales en utilisant le tableau Arr
    For i = 1 To UBound(Arr, 1)
        quantiteActuelle = Arr(i, 1)
        Dim typeActif As String: typeActif = Arr(i, 2)
        Dim typeBonds As String: typeBonds = Arr(i, 3)
        Dim prix As Double: prix = Arr(i, 4)
        Dim VG As Double: VG = Arr(i, 5)
        Dim marketValue As Double: marketValue = quantiteActuelle * prix

        ' Ajustement pour les bonds
        If typeActif = "Bonds" And (typeBonds = "HY" Or typeBonds = "IG") Then
            marketValue = marketValue / 100
        End If

        ' Calcul de MarketValue et MarketValueVG
        Dim VG_EUR As Double: VG_EUR = marketValue * (VG / 100)
        Arr(i, 6) = marketValue
        Arr(i, 7) = VG_EUR

        ' Mise à jour des sommes globales
        sumMarketValue = sumMarketValue + marketValue
        sumMarketValueVG = sumMarketValueVG + VG_EUR

        If typeActif = "Equity" Then
            sumMarketValueVG_Equity = sumMarketValueVG_Equity + VG_EUR
        ElseIf typeActif = "Bonds" And (typeBonds = "HY" Or typeBonds = "IG") Then
            sumMarketValueVG_BondsHY = sumMarketValueVG_BondsHY + VG_EUR
        ElseIf typeActif = "Equity" And Arr(i, 4) = "US" Then
            sumMarketValueVG_US = sumMarketValueVG_US + VG_EUR
        End If
    Next i

    ' Boucle d'optimisation
    Do
        converged = True

        ' Limite Equity
        If applyLimitEquity And sumMarketValueVG_Equity / sumMarketValueVG > limiteEquity Then
            totalReduction = sumMarketValueVG_Equity - limiteEquity * sumMarketValueVG
            totalReductionProportionnelle = totalReduction / sumMarketValueVG_Equity
            For i = 1 To UBound(Arr, 1)
                If Arr(i, 2) = "Equity" Then
                    Dim VG_EUR As Double: VG_EUR = Arr(i, 7)
                    Dim reduction As Double: reduction = VG_EUR * totalReductionProportionnelle
                    quantiteNouvelle = Arr(i, 1) * (1 - reduction / VG_EUR)
                    Arr(i, 1) = quantiteNouvelle
                End If
            Next i
            converged = False
        End If

        ' Limite Bonds HY
        If applyLimitBondsHY And sumMarketValueVG_BondsHY / sumMarketValueVG > limiteBondsHY Then
            totalReduction = sumMarketValueVG_BondsHY - limiteBondsHY * sumMarketValueVG
            totalReductionProportionnelle = totalReduction / sumMarketValueVG_BondsHY
            For i = 1 To UBound(Arr, 1)
                If Arr(i, 3) = "HY" Then
                    Dim VG_EUR As Double: VG_EUR = Arr(i, 7)
                    Dim reduction As Double: reduction = VG_EUR * totalReductionProportionnelle
                    quantiteNouvelle = Arr(i, 1) * (1 - reduction / VG_EUR)
                    Arr(i, 1) = quantiteNouvelle
                End If
            Next i
            converged = False
        End If

        ' Limite US
        If applyLimitUS And sumMarketValueVG_US / sumMarketValueVG > limiteUS Then
            totalReduction = sumMarketValueVG_US - limiteUS * sumMarketValueVG
            totalReductionProportionnelle = totalReduction / sumMarketValueVG_US
            For i = 1 To UBound(Arr, 1)
                If Arr(i, 2) = "Equity" And Arr(i, 4) = "US" Then
                    Dim VG_EUR As Double: VG_EUR = Arr(i, 7)
                    Dim reduction As Double: reduction = VG_EUR * totalReductionProportionnelle
                    quantiteNouvelle = Arr(i, 1) * (1 - reduction / VG_EUR)
                    Arr(i, 1) = quantiteNouvelle
                End If
            Next i
            converged = False
        End If

        ' Recalculer les sommes après ajustements
        sumMarketValue = 0
        sumMarketValueVG = 0
        sumMarketValueVG_Equity = 0
        sumMarketValueVG_BondsHY = 0
        sumMarketValueVG_US = 0

        For i = 1 To UBound(Arr, 1)
            quantiteActuelle = Arr(i, 1)
            Dim typeActif As String: typeActif = Arr(i, 2)
            Dim typeBonds As String: typeBonds = Arr(i, 3)
            Dim prix As Double: prix = Arr(i, 4)
            Dim VG As Double: VG = Arr(i, 5)
            Dim marketValue As Double: marketValue = quantiteActuelle * prix

            If typeActif = "Bonds" And (typeBonds = "HY" Or typeBonds = "IG") Then
                marketValue = marketValue / 100
            End If

            VG_EUR = marketValue * (VG / 100)

            sumMarketValue = sumMarketValue + marketValue
            sumMarketValueVG = sumMarketValueVG + VG_EUR

            If typeActif = "Equity" Then
                sumMarketValueVG_Equity = sumMarketValueVG_Equity + VG_EUR
            ElseIf typeActif = "Bonds" And (typeBonds = "HY" Or typeBonds = "IG") Then
                sumMarketValueVG_BondsHY = sumMarketValueVG_BondsHY + VG_EUR
            ElseIf typeActif = "Equity" And Arr(i, 4) = "US" Then
                sumMarketValueVG_US = sumMarketValueVG_US + VG_EUR
            End If
        Next i

    Loop While Not converged

    MsgBox "Optimisation terminée avec les limites appliquées!"
End Sub
