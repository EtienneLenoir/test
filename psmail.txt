```
import os
import win32com.client

# Chemin où les PDF seront stockés
output_dir = "C:/path/to/output_dir"

# Connexion à Outlook
outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
inbox = outlook.Folders.Item("votre_email@example.com").Folders.Item("Inbox")
messages = inbox.Items

# Parcourir les messages et télécharger les pièces jointes PDF
for message in messages:
    try:
        for attachment in message.Attachments:
            if attachment.FileName.endswith(".pdf"):
                attachment.SaveAsFile(os.path.join(output_dir, attachment.FileName))
                print(f"Saved {attachment.FileName} from {message.Subject}")
    except Exception as e:
        print(f"Error processing message: {e}")

```
2. Construction et enrichissement d'un modèle de machine learning
Pour construire un modèle de machine learning capable de prédire les triplets de valeurs de gage à partir des termsheets, vous pouvez suivre les étapes suivantes :

a. Extraction des caractéristiques des PDF
Utilisez une bibliothèque comme PyMuPDF ou pdfplumber pour extraire le texte des fichiers PDF. Vous pouvez également utiliser des techniques de NLP pour extraire des caractéristiques pertinentes.

import win32com.client
import os

```
outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
inbox = outlook.GetDefaultFolder(6)  # 6 = Inbox
messages = inbox.Items

save_path = "C:/Users/TonNom/Documents/TermSheets"

for msg in messages:
    if msg.Attachments.Count > 0:
        for att in msg.Attachments:
            if att.FileName.endswith(".pdf"):
                att.SaveAsFile(os.path.join(save_path, att.FileName))
                print(f"Fichier {att.FileName} enregistré.")
```

Dans ce cas, vous avez deux ensembles de données :

Les PDFs où le nom du fichier contient l'ISIN.

Un autre fichier avec des ISIN et leurs valeurs de gage associées.

L'objectif est d'utiliser XGBoost pour prédire la valeur de gage à partir des PDFs.

Voici comment vous pourriez organiser cela pour construire un modèle supervisé avec XGBoost :

1. Prétraitement des données :
a. Extraire les ISIN et leurs valeurs de gage :
Vous avez un fichier séparé avec les ISIN et les valeurs de gage associées. Ce fichier peut être dans un format comme CSV ou Excel, et vous allez devoir le charger et le préparer pour l'entraînement du modèle supervisé.

Exemple en Python pour charger un fichier CSV :

python
Copier
Modifier
import pandas as pd

# Charger les ISIN et leurs valeurs de gage
df_valeur_de_gage = pd.read_csv('valeurs_de_gage.csv')

# Exemple de structure : 
# df_valeur_de_gage = pd.DataFrame({
#     'ISIN': ['ISIN1', 'ISIN2', 'ISIN3'],
#     'valeur_de_gage': [0.05, 0.10, 0.08]
# })

print(df_valeur_de_gage.head())
b. Extraire l'ISIN des noms de fichiers PDF :
Si le nom du fichier PDF contient l'ISIN, vous pouvez extraire cette information de manière simple. Par exemple, si chaque nom de fichier est formaté de manière consistante, vous pouvez utiliser des expressions régulières pour extraire l'ISIN.

Voici comment extraire l'ISIN à partir du nom du fichier PDF :

python
Copier
Modifier
import os
import re

# Liste des fichiers PDF dans votre dossier
pdf_folder = 'chemin/vers/les/pdfs'
pdf_files = os.listdir(pdf_folder)

# Fonction pour extraire l'ISIN du nom de fichier
def extract_isin_from_filename(filename):
    # Exemple d'ISIN dans le format "XX1234567890" (modifiez selon vos besoins)
    match = re.search(r'\b[A-Z]{2}\d{10}\b', filename)
    if match:
        return match.group(0)
    return None

# Extraire les ISINs des fichiers PDF
isins_from_pdfs = [extract_isin_from_filename(f) for f in pdf_files]
print(isins_from_pdfs)
c. Extraire le texte des PDF :
Une fois que vous avez les ISIN extraits des noms de fichiers, vous devez extraire le texte des PDFs. Vous pouvez utiliser des bibliothèques comme PyMuPDF ou pdfminer pour cela.

Exemple avec PyMuPDF pour extraire du texte :

python
Copier
Modifier
import fitz  # PyMuPDF

# Fonction pour extraire du texte à partir d'un PDF
def extract_text_from_pdf(pdf_path):
    doc = fitz.open(pdf_path)
    text = ""
    for page in doc:
        text += page.get_text()
    return text

# Exemple d'extraction pour un fichier PDF
pdf_path = os.path.join(pdf_folder, pdf_files[0])
pdf_text = extract_text_from_pdf(pdf_path)
print(pdf_text[:500])  # Affiche les 500 premiers caractères du texte extrait
d. Préparer les données d'entrée pour XGBoost :
Une fois le texte extrait des PDFs et l'ISIN lié à chaque fichier, vous pouvez préparer les données pour l'entraînement du modèle XGBoost.

Extraire des caractéristiques textuelles :

Utilisez des embeddings comme TF-IDF, Word2Vec, ou Sentence-BERT pour transformer le texte extrait en vecteurs numériques.

Exemple avec TF-IDF :

python
Copier
Modifier
from sklearn.feature_extraction.text import TfidfVectorizer

# Utilisation de TF-IDF pour transformer le texte en vecteurs
vectorizer = TfidfVectorizer(max_features=1000)  # Limiter à 1000 caractéristiques
X_text = vectorizer.fit_transform([extract_text_from_pdf(os.path.join(pdf_folder, f)) for f in pdf_files])

print(X_text.shape)  # Affiche la forme de la matrice
Joindre les données d'ISIN avec la valeur de gage :

Associez les ISIN extraits des fichiers PDF aux valeurs de gage correspondantes.

Assurez-vous que pour chaque fichier PDF, vous ayez une valeur de gage cible à prédire.

python
Copier
Modifier
# Merge les données du PDF avec les valeurs de gage
df_isins = pd.DataFrame({'ISIN': isins_from_pdfs})

# Merge les valeurs de gage avec les ISINs extraits des fichiers
df_combined = pd.merge(df_isins, df_valeur_de_gage, on="ISIN", how="left")
print(df_combined.head())
2. Entraîner le modèle XGBoost :
Une fois que vous avez préparé les caractéristiques (via TF-IDF ou d'autres techniques) et que vous avez les valeurs de gage comme cibles, vous pouvez entraîner un modèle XGBoost pour prédire la valeur de gage en fonction du texte extrait des PDFs.

python
Copier
Modifier
import xgboost as xgb
from sklearn.model_selection import train_test_split

# Extraire les caractéristiques (X) et les cibles (y)
X = X_text.toarray()  # Convertir la matrice sparse en un tableau dense
y = df_combined['valeur_de_gage'].values  # Valeurs de gage cibles

# Diviser les données en jeu d'entraînement et jeu de test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialiser et entraîner le modèle XGBoost
model = xgb.XGBRegressor(objective='reg:squarederror', eval_metric='rmse')
model.fit(X_train, y_train)

# Prédire sur le jeu de test
y_pred = model.predict(X_test)

# Évaluer les performances du modèle
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
3. Prédire la valeur de gage pour de nouveaux PDFs :
Lorsque vous avez un nouveau fichier PDF pour lequel vous souhaitez prédire la valeur de gage :

Extraire l'ISIN du nom du fichier.

Extraire le texte du PDF.

Transformer le texte en vecteur avec le même TF-IDF ou autre méthode que vous avez utilisée pour l'entraînement.

Utiliser le modèle XGBoost pour prédire la valeur de gage.

Exemple de prédiction :

python
Copier
Modifier
# Exemple de prédiction pour un nouveau PDF
new_pdf_path = 'chemin/vers/nouveau_pdf.pdf'
new_pdf_text = extract_text_from_pdf(new_pdf_path)
new_pdf_vector = vectorizer.transform([new_pdf_text]).toarray()

# Prédiction de la valeur de gage
predicted_valeur_de_gage = model.predict(new_pdf_vector)
print(f'La valeur de gage prédite est : {predicted_valeur_de_gage}')

