https://stackoverflow.com/questions/65549178/excel-vba-how-to-filter-out-an-array
Range.AutoFilter Field:=1, Criteria1:="=<>A", Operator:=xlOr, Criteria2:="=<>B"
Sub filter_range_with_autofilter(code_aggregat As String)

    Dim key_code_rubrique       As Variant
    Dim key_LabelFilter         As Variant
    Dim list_filter_fields_new  As Variant
    Dim range_ToFilter          As Range
    Dim dict_input              As New Dictionary
    Dim col_bmf                 As Integer

    Set range_ToFilter = ws_cube_bmf_value.Range("A1").CurrentRegion
    Set dict_input = fct_dict_MappingBMF_nested
    
    range_ToFilter.AutoFilter
    For Each key_code_rubrique In dict_input.Keys
        
        If key_code_rubrique = code_aggregat Then
        
            For Each key_LabelFilter In dict_input(key_code_rubrique).Keys
                
                If InStr(CStr(dict_input(key_code_rubrique)(key_LabelFilter)), ",") Then
                    list_filter_fields_new = Split(dict_input(key_code_rubrique)(key_LabelFilter), ",")
                Else
                    list_filter_fields_new = dict_input(key_code_rubrique)(key_LabelFilter)
                End If
                
                col_bmf = Application.WorksheetFunction.Match(key_LabelFilter, ws_cube_bmf_value.Rows("1:1"), 0)
                range_ToFilter.AutoFilter Field:=col_bmf, Criteria1:=list_filter_fields_new, Operator:=xlFilterValues
            Next key_LabelFilter
        
        End If
        
    Next key_code_rubrique
    
        'DEBUG
        '    ws_test.Cells.Clear
        '    ws_cube_bmf_value.Range("A1").CurrentRegion.Copy
        '    ws_test.Range("A1").PasteSpecial xlPasteValues
        '    Application.CutCopyMode = False
        '    range_ToFilter.AutoFilter
 
End Sub

 ' Récupérer la plage visible après filtrage
    On Error Resume Next ' Ignorer les erreurs si aucune ligne visible
    Set visibleRange = rng.SpecialCells(xlCellTypeVisible)
    On Error GoTo 0 ' Réactiver les erreurs

    If Not visibleRange Is Nothing Then
        ' Calculer le nombre de lignes visibles
        rowCount = visibleRange.Rows.Count - 1 ' Exclure l'en-tête
        ReDim resultArr(1 To rowCount, 1 To visibleRange.Columns.Count)

        ' Copier les données visibles dans le tableau
        Dim r As Long, c As Long
        r = 1 ' Index pour le tableau
        For Each cell In visibleRange.Rows
            If cell.Row > rng.Row Then ' Ignorer l'en-tête
                For c = 1 To visibleRange.Columns.Count
                    resultArr(r, c) = cell.Cells(1, c).Value
                Next c
                r = r + 1
            End If
        Next cell

        ' Retourner le tableau
        FilterAndStoreResults = resultArr
    Else
        ' Aucune ligne visible, retourner un tableau vide
        FilterAndStoreResults = Array()
    End If
²
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Option Explicit

' Fonction principale pour filtrer une plage de données
Public Sub FilterRange(ByVal rng As Range, ByVal dictFilters As Object)
    Dim col As Variant
    Dim filterCriteria() As Variant
    Dim include As Boolean
    Dim i As Long

    ' Désactiver les mises à jour de l'écran et les calculs automatiques pour améliorer les performances
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' Retirer les filtres existants
    If rng.Parent.AutoFilterMode Then rng.Parent.AutoFilterMode = False

    ' Appliquer les filtres
    rng.AutoFilter

    For Each col In dictFilters.keys
        ' Récupérer les critères de la colonne spécifiée dans le dictionnaire
        filterCriteria = dictFilters(col)(0)
        include = dictFilters(col)(1)

        ' Application des filtres
        If include Then
            ' Inclusion - plusieurs valeurs
            rng.AutoFilter Field:=col, Criteria1:=filterCriteria, Operator:=xlFilterValues
        Else
            ' Exclusion
            Dim criteriaExclusion() As String
            Dim criteriaCount As Long
            
            criteriaCount = UBound(filterCriteria) - LBound(filterCriteria) + 1
            ReDim criteriaExclusion(0 To criteriaCount - 1)

            ' Préparer les critères d'exclusion
            For i = LBound(filterCriteria) To UBound(filterCriteria)
                criteriaExclusion(i) = "<>" & filterCriteria(i)
            Next i
            
            ' Appliquer les critères d'exclusion
            If criteriaCount = 1 Then
                rng.AutoFilter Field:=col, Criteria1:=criteriaExclusion(0)
            ElseIf criteriaCount = 2 Then
                rng.AutoFilter Field:=col, Criteria1:=criteriaExclusion(0), Operator:=xlAnd, Criteria2:=criteriaExclusion(1)
            Else
                ' Pour trois ou plus, appliquer un premier filtre, puis un autre
                rng.AutoFilter Field:=col, Criteria1:=criteriaExclusion(0), Operator:=xlAnd, Criteria2:=criteriaExclusion(1)
                If criteriaCount > 2 Then
                    For i = 2 To UBound(filterCriteria)
                        rng.AutoFilter Field:=col, Criteria1:=criteriaExclusion(i)
                    Next i
                End If
            End If
        End If
    Next col

    ' Réactiver les mises à jour de l'écran et les calculs automatiques
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

' Fonction d'exemple pour démontrer comment appeler la fonction FilterRange
Public Sub ExampleUsage()
    Dim dictFilters As Object
    Dim rng As Range
    Dim criteria1() As String
    Dim criteria2() As String
    Dim i As Long
    
    ' Initialisation du dictionnaire
    Set dictFilters = CreateObject("Scripting.Dictionary")
    
    ' Définir une plage à filtrer
    Set rng = ThisWorkbook.Sheets("Sheet1").Range("A1:D100")
    
    ' Remplir un tableau dynamique avec des valeurs à inclure pour la colonne 1
    ' Utilisation d'une plage de cellules pour remplir le tableau
    Dim sourceRange As Range
    Set sourceRange = ThisWorkbook.Sheets("Sheet1").Range("E1:E3") ' Par exemple, plage contenant les valeurs
    
    ReDim criteria1(0 To sourceRange.Rows.Count - 1)
    
    ' Remplir le tableau avec les valeurs de la plage
    For i = 0 To sourceRange.Rows.Count - 1
        criteria1(i) = sourceRange.Cells(i + 1, 1).Value
    Next i
    
    dictFilters.Add 1, Array(criteria1, True) ' True signifie inclure les valeurs
    
    ' Remplir un tableau dynamique avec des valeurs à exclure pour la colonne 2
    Set sourceRange = ThisWorkbook.Sheets("Sheet1").Range("F1:F3") ' Plage pour les valeurs à exclure
    ReDim criteria2(0 To sourceRange.Rows.Count - 1)
    
    ' Remplir le tableau avec les valeurs de la plage
    For i = 0 To sourceRange.Rows.Count - 1
        criteria2(i) = sourceRange.Cells(i + 1, 1).Value
    Next i
    
    dictFilters.Add 2, Array(criteria2, False) ' False signifie exclure les valeurs
    
    ' Appeler la fonction FilterRange
    Call FilterRange(rng, dictFilters)
End Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Option Explicit

' Fonction principale pour filtrer une plage de données
Public Sub FilterRange(ByVal rng As Range, ByVal dictFilters As Object)
    Dim col As Variant
    Dim filterCriteria() As Variant
    Dim include As Boolean
    Dim i As Long

    ' Désactiver les mises à jour de l'écran et les calculs automatiques pour améliorer les performances
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' Retirer les filtres existants
    If rng.Parent.AutoFilterMode Then rng.Parent.AutoFilterMode = False

    ' Appliquer les filtres
    rng.AutoFilter

    For Each col In dictFilters.keys
        ' Récupérer les critères de la colonne spécifiée dans le dictionnaire
        filterCriteria = dictFilters(col)(0)
        include = dictFilters(col)(1)

        ' Application des filtres
        If include Then
            ' Inclusion - une seule valeur
            If UBound(filterCriteria) = 0 Then
                rng.AutoFilter Field:=col, Criteria1:=filterCriteria(0)
            Else
                ' Inclusion - plusieurs valeurs
                Dim criteriaArray() As String
                ReDim criteriaArray(0 To UBound(filterCriteria))
                
                For i = LBound(filterCriteria) To UBound(filterCriteria)
                    criteriaArray(i) = filterCriteria(i)
                Next i
                
                rng.AutoFilter Field:=col, Criteria1:=criteriaArray, Operator:=xlFilterValues
            End If
        Else
            ' Exclusion
            Dim criteriaCount As Long
            criteriaCount = UBound(filterCriteria) - LBound(filterCriteria) + 1
            
            ' Application des critères d'exclusion en fonction du nombre
            If criteriaCount = 1 Then
                ' Un seul critère à exclure
                rng.AutoFilter Field:=col, Criteria1:="<> " & filterCriteria(0)
            ElseIf criteriaCount = 2 Then
                ' Deux critères à exclure
                rng.AutoFilter Field:=col, Criteria1:="<> " & filterCriteria(0), Operator:=xlAnd, Criteria2:="<> " & filterCriteria(1)
            Else
                ' Trois ou plus - deux à la fois
                ' On fait le premier AutoFilter avec les deux premières valeurs
                rng.AutoFilter Field:=col, Criteria1:="<> " & filterCriteria(0), Operator:=xlAnd, Criteria2:="<> " & filterCriteria(1)
                
                ' On fait un deuxième AutoFilter avec la troisième valeur
                If criteriaCount > 2 Then
                    rng.AutoFilter Field:=col, Criteria1:="<> " & filterCriteria(2)
                End If
            End If
        End If
    Next col

    ' Réactiver les mises à jour de l'écran et les calculs automatiques
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

' Fonction d'exemple pour démontrer comment appeler la fonction FilterRange
Public Sub ExampleUsage()
    Dim dictFilters As Object
    Dim rng As Range
    Dim criteria1 As Variant
    Dim criteria2 As Variant
    
    ' Initialisation du dictionnaire
    Set dictFilters = CreateObject("Scripting.Dictionary")
    
    ' Définir une plage à filtrer
    Set rng = ThisWorkbook.Sheets("Sheet1").Range("A1:D100")
    
    ' Exemple de critères d'inclusion pour la colonne 1
    criteria1 = Array("Value1", "Value2", "Value3") ' Valeurs à inclure pour la colonne 1
    dictFilters.Add 1, Array(criteria1, True) ' True signifie inclure les valeurs
    
    ' Exemple de critères d'exclusion pour la colonne 2
    criteria2 = Array("Exclude1", "Exclude2", "Exclude3") ' Valeurs à exclure pour la colonne 2
    dictFilters.Add 2, Array(criteria2, False) ' False signifie exclure les valeurs
    
    ' Appeler la fonction FilterRange
    Call FilterRange(rng, dictFilters)
End Sub


"""""""""""""""""""""""""""""""""""""""

Option Explicit

' Fonction principale pour filtrer une plage de données
Public Sub FilterRange(ByVal rng As Range, ByVal dictFilters As Object)
    Dim col As Variant
    Dim filterCriteria() As Variant
    Dim include As Boolean
    Dim criteriaCount As Long
    
    ' Désactiver les mises à jour de l'écran et les calculs automatiques pour améliorer les performances
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' Retirer les filtres existants
    If rng.Parent.AutoFilterMode Then rng.Parent.AutoFilterMode = False

    ' Appliquer les filtres
    rng.AutoFilter

    For Each col In dictFilters.keys
        ' Récupérer les critères de la colonne spécifiée dans le dictionnaire
        filterCriteria = dictFilters(col)(0)
        include = dictFilters(col)(1)

        ' Compter le nombre de critères
        criteriaCount = UBound(filterCriteria) - LBound(filterCriteria) + 1
        
        If include Then
            ' Inclusion - plusieurs valeurs
            If criteriaCount = 1 Then
                rng.AutoFilter Field:=col, Criteria1:=filterCriteria(0)
            Else
                rng.AutoFilter Field:=col, Criteria1:=filterCriteria, Operator:=xlFilterValues
            End If
        Else
            ' Exclusion
            Select Case criteriaCount
                Case 1
                    rng.AutoFilter Field:=col, Criteria1:="<> " & filterCriteria(0)
                Case 2
                    rng.AutoFilter Field:=col, Criteria1:="<> " & filterCriteria(0), Operator:=xlAnd, Criteria2:="<> " & filterCriteria(1)
                Case Else
                    ' Trois ou plus - premièrement deux exclusions
                    rng.AutoFilter Field:=col, Criteria1:="<> " & filterCriteria(0), Operator:=xlAnd, Criteria2:="<> " & filterCriteria(1)
                    ' Exclure les autres valeurs une à une
                    Dim i As Long
                    For i = 2 To UBound(filterCriteria)
                        rng.AutoFilter Field:=col, Criteria1:="<> " & filterCriteria(i)
                    Next i
            End Select
        End If
    Next col

    ' Réactiver les mises à jour de l'écran et les calculs automatiques
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

' Fonction d'exemple pour démontrer comment appeler la fonction FilterRange
Public Sub ExampleUsage()
    Dim dictFilters As Object
    Dim rng As Range
    
    ' Initialisation du dictionnaire
    Set dictFilters = CreateObject("Scripting.Dictionary")
    
    ' Définir une plage à filtrer
    Set rng = ThisWorkbook.Sheets("Sheet1").Range("A1:D100")
    
    ' Exemple de critères d'inclusion pour la colonne 1
    dictFilters.Add 1, Array(Array("Value1", "Value2", "Value3"), True) ' True signifie inclure les valeurs
    
    ' Exemple de critères d'exclusion pour la colonne 2
    dictFilters.Add 2, Array(Array("Exclude1", "Exclude2", "Exclude3"), False) ' False signifie exclure les valeurs
    
    ' Appeler la fonction FilterRange
    Call FilterRange(rng, dictFilters)
End Sub


****************************************
'***********************************************************
    ' Comments: Uses a binary search algorithm to quickly locate
    ' a string within a sorted array of strings
    '
    ' Arguments: sLookFor The string to search for in the array
    ' saArray An array of strings, sorted ascending
    ' lMethod Either vbBinaryCompare or vbTextCompare
    ' Defaults to vbTextCompare
    ' lNotFound The value to return if the text isn’t
    ' found. Defaults to -1
    '
    ' Returns: Long The located position in the array,
    ' or lNotFound if not found
    '
    ' Date Developer Action
    ' ———————————————————————————————-
    ' 02 Jun 04 Stephen Bullen Created
    '
    Function BinarySearchString(ByRef sLookFor As String, _
                ByRef saArray() As String, _
                Optional ByVal lMethod As VbCompareMethod = vbTextCompare, _
                Optional ByVal lNotFound As Long = -1) As Long

    Dim lLow As Long
    Dim lMid As Long
    Dim lHigh As Long
    Dim lComp As Long

        On Error GoTo ErrorExit

        'Assume we didn’t find it
        BinarySearchString = lNotFound

        'Get the starting positions
        lLow = LBound(saArray)
        lHigh = UBound(saArray)

        Do
            'Find the midpoint of the array
            lMid = (lLow + lHigh) \ 2

            'Compare the mid-point element to the string being searched for
            lComp = StrComp(saArray(lMid), sLookFor, lMethod)

            If lComp = 0 Then
                'We found it, so return the location and quit
                BinarySearchString = lMid
                Exit Do
            ElseIf lComp = 1 Then
                'The midpoint item is bigger than us - throw away the top half
                lHigh = lMid - 1
            Else
                'The midpoint item is smaller than us - throw away the bottom half
                lLow = lMid + 1
            End If

            'Continue until our pointers cross
        Loop Until lLow > lHigh

    ErrorExit:

    End Function